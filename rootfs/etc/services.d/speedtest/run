#!/bin/bash

# this script is invoced every 6 minutes if clipboard is set to 'RUN', then a speedtest runs

time_to_minutes() {
    local TIME="$1"
    IFS=':' read -r HOUR MINUTE <<< "$TIME"
    if ! [[ "$HOUR" =~ ^[0-9]+$ && "$MINUTE" =~ ^[0-9]+$ ]]; then
        echo "Invalid time format. Use HH:MM or H:MM" >&2
        return 1
    fi
    echo $(( $HOUR*60 + $MINUTE ))
}

start_time_minutes=$(time_to_minutes $TIME_START)
end_time_minutes=$(time_to_minutes $TIME_END)

USE_HOMEASSISTANT=true
let "time_between_retries=5*60"
if [ -z ${HOMEASSISTANT_URL_DISABLE+set} ]; then
    echo "HOMEASSISTANT_URL_DISABLE undefined."
    USE_HOMEASSISTANT=false
fi
if [ -z ${HOMEASSISTANT_URL_ENABLE+set} ]; then
    echo "HOMEASSISTANT_URL_ENABLE undefined."
    USE_HOMEASSISTANT=false
fi
if [ -z ${HOMEASSISTANT_TOKEN+set} ]; then
    echo "HOMEASSISTANT_TOKEN undefined."
    USE_HOMEASSISTANT=false
fi
if [ "$USE_HOMEASSISTANT" == "true" ]; then
    echo "Enabling Homeassistant requests."
else
    echo "Homeassistant requests disabled."
    let "time_between_retries=6*60"
fi

while true
do

    # wait 15 seconds, then check again
    sleep 15

    # get value of clipboard from novnc
    clipboard="$(DISPLAY=:0 xclip -o)"

    # check if /RUN File exists, or if clipboard is set to 'RUN'
    if [ "$clipboard" == "RUN" ] || [ -f "/RUN" ]
    then
        echo "Run set!"


        # Get the current hour and minute in 24-hour format (e.g., 14:30)
        current_time=$(date +"%H:%M:%S")
        echo "Current time is $current_time"


        # Save the hour and minute
        current_hour=$(date +"%H")
        current_minute=$(date +"%M")
        current_hour=${current_hour#0}
        current_minute=${current_minute#0}

        # Convert the current time to minutes for comparison
        let "current_time_minutes=$current_hour * 60 + $current_minute"


        # Check if the current time is within the specified range
        # --> only start speedtesting during daytime, as this is the most relevant metric
        if (( current_time_minutes >= start_time_minutes && current_time_minutes <= end_time_minutes ))
        then
            echo "The current time is between $TIME_START and $TIME_END."

            if [ "$USE_HOMEASSISTANT" == "true" ]; then
                echo "Performing Homeassistant DISABLE request"
                wget \
                    --post-data="" \
                    --header="Authorization: Bearer ${HOMEASSISTANT_TOKEN}" \
                    ${HOMEASSISTANT_URL_DISABLE}
            fi

            echo "Trying to start speedtest..."

            # messung durchfuehren
            DISPLAY=:0 xdotool mousemove 531 510
            DISPLAY=:0 xdotool click 1


            # haeckchen
            DISPLAY=:0 xdotool mousemove 694 405
            DISPLAY=:0 xdotool click 1
            DISPLAY=:0 xdotool mousemove 694 479
            DISPLAY=:0 xdotool click 1
            DISPLAY=:0 xdotool mousemove 694 551
            DISPLAY=:0 xdotool click 1

            DISPLAY=:0 xdotool mousemove 1169 405
            DISPLAY=:0 xdotool click 1
            DISPLAY=:0 xdotool mousemove 1169 479
            DISPLAY=:0 xdotool click 1
            DISPLAY=:0 xdotool mousemove 1169 551
            DISPLAY=:0 xdotool click 1

            # messung starten
            DISPLAY=:0 xdotool mousemove 1091 668
            DISPLAY=:0 xdotool click 1

            if [ "$USE_HOMEASSISTANT" == "true" ]; then
                # Wait 1 minute for the measurement to complete
                echo "Waiting 60 seconds to perform Homeassistant enable request"
                sleep 60
                echo "Performing Homeassistant-ENBALE request"
                wget \
                    --post-data="" \
                    --header="Authorization: Bearer ${HOMEASSISTANT_TOKEN}" \
                    ${HOMEASSISTANT_URL_ENABLE}
            fi

            # wait 6 minutes
            echo "waiting 6 minutes..."
            sleep $time_between_retries


        else
            echo "NOT STARTING. The current time is outside the specified range of $TIME_START and $TIME_END."
        fi


    else
        echo "RUN not set in clipboard or file /RUN not available. (value in clipboard is \"$clipboard\")"
        printf "sleeping 15 seconds.\n\n"
    fi

done



# xdotool getmouselocation

